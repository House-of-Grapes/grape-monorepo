/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RomeConscriptionInterface extends utils.Interface {
  functions: {
    "activateProfile()": FunctionFragment;
    "addClass(bytes32)": FunctionFragment;
    "changeHouse(bytes32)": FunctionFragment;
    "changeLockupAmount(uint256)": FunctionFragment;
    "changeManaging(address,bool)": FunctionFragment;
    "changeName(bytes32,address)": FunctionFragment;
    "changeSROME(address)": FunctionFragment;
    "classes(uint256)": FunctionFragment;
    "createHouse(bytes32)": FunctionFragment;
    "createProfile(bytes32,bytes32,uint256)": FunctionFragment;
    "deactivateProfile()": FunctionFragment;
    "getClassLength()": FunctionFragment;
    "getClasses()": FunctionFragment;
    "getIdForHouse(bytes32)": FunctionFragment;
    "isUniqueName(bytes32)": FunctionFragment;
    "lock()": FunctionFragment;
    "lockupAmount()": FunctionFragment;
    "managers(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "policy()": FunctionFragment;
    "profiles(address)": FunctionFragment;
    "pullPolicy()": FunctionFragment;
    "pushPolicy(address)": FunctionFragment;
    "renouncePolicy()": FunctionFragment;
    "rescueTokens(address,address,uint256)": FunctionFragment;
    "sROME()": FunctionFragment;
    "totalHouses()": FunctionFragment;
    "unlock()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activateProfile",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addClass", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "changeHouse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLockupAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeManaging",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "changeSROME", values: [string]): string;
  encodeFunctionData(
    functionFragment: "classes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createHouse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClassLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClasses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdForHouse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUniqueName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockupAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "managers", values: [string]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(functionFragment: "profiles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pullPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pushPolicy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renouncePolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sROME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalHouses",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addClass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLockupAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeManaging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSROME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "classes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClassLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClasses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdForHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUniqueName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockupAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pullPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renouncePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sROME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalHouses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "ClassCreated(bytes32,uint256)": EventFragment;
    "HouseChanged(bytes32,bytes32,address)": EventFragment;
    "HouseCreated(bytes32,address,uint256,uint256)": EventFragment;
    "LockupAmountUpdated(uint256)": EventFragment;
    "ManagementChanged(address,bool)": EventFragment;
    "NameChanged(bytes32,bytes32,address)": EventFragment;
    "OwnershipPulled(address,address)": EventFragment;
    "OwnershipPushed(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProfileActivated(address,uint256)": EventFragment;
    "ProfileCreated(bytes32,bytes32,uint256,address,uint256)": EventFragment;
    "ProfileDeactivated(address,uint256)": EventFragment;
    "TokensRescued(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "sRomeUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClassCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockupAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagementChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRescued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sRomeUpdated"): EventFragment;
}

export type ClassCreatedEvent = TypedEvent<
  [string, BigNumber],
  { className: string; classId: BigNumber }
>;

export type ClassCreatedEventFilter = TypedEventFilter<ClassCreatedEvent>;

export type HouseChangedEvent = TypedEvent<
  [string, string, string],
  { oldHouse: string; newHouse: string; userAddress: string }
>;

export type HouseChangedEventFilter = TypedEventFilter<HouseChangedEvent>;

export type HouseCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    house: string;
    creatorAddress: string;
    houseId: BigNumber;
    timestampCreated: BigNumber;
  }
>;

export type HouseCreatedEventFilter = TypedEventFilter<HouseCreatedEvent>;

export type LockupAmountUpdatedEvent = TypedEvent<
  [BigNumber],
  { newLockupAmount: BigNumber }
>;

export type LockupAmountUpdatedEventFilter =
  TypedEventFilter<LockupAmountUpdatedEvent>;

export type ManagementChangedEvent = TypedEvent<
  [string, boolean],
  { managerAddress: string; isManager: boolean }
>;

export type ManagementChangedEventFilter =
  TypedEventFilter<ManagementChangedEvent>;

export type NameChangedEvent = TypedEvent<
  [string, string, string],
  { oldName: string; newName: string; userAddress: string }
>;

export type NameChangedEventFilter = TypedEventFilter<NameChangedEvent>;

export type OwnershipPulledEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipPulledEventFilter = TypedEventFilter<OwnershipPulledEvent>;

export type OwnershipPushedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipPushedEventFilter = TypedEventFilter<OwnershipPushedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ProfileActivatedEvent = TypedEvent<
  [string, BigNumber],
  { userAddress: string; timestampActivated: BigNumber }
>;

export type ProfileActivatedEventFilter =
  TypedEventFilter<ProfileActivatedEvent>;

export type ProfileCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    characterName: string;
    house: string;
    classId: BigNumber;
    userAddress: string;
    timestampCreated: BigNumber;
  }
>;

export type ProfileCreatedEventFilter = TypedEventFilter<ProfileCreatedEvent>;

export type ProfileDeactivatedEvent = TypedEvent<
  [string, BigNumber],
  { userAddress: string; timestampDeactivated: BigNumber }
>;

export type ProfileDeactivatedEventFilter =
  TypedEventFilter<ProfileDeactivatedEvent>;

export type TokensRescuedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type TokensRescuedEventFilter = TypedEventFilter<TokensRescuedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type sRomeUpdatedEvent = TypedEvent<
  [string],
  { newSRomeContract: string }
>;

export type sRomeUpdatedEventFilter = TypedEventFilter<sRomeUpdatedEvent>;

export interface RomeConscription extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RomeConscriptionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "activateProfile()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addClass(
      newClass_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addClass(bytes32)"(
      newClass_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeHouse(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeLockupAmount(
      newLockupAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeLockupAmount(uint256)"(
      newLockupAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeManaging(
      who: string,
      isManaging: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeManaging(address,bool)"(
      who: string,
      isManaging: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeName(
      newName_: BytesLike,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeName(bytes32,address)"(
      newName_: BytesLike,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSROME(
      sROME_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeSROME(address)"(
      sROME_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    classes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "classes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createHouse(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProfile(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createProfile(bytes32,bytes32,uint256)"(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deactivateProfile()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClassLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getClassLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClasses(overrides?: CallOverrides): Promise<[string[]]>;

    "getClasses()"(overrides?: CallOverrides): Promise<[string[]]>;

    getIdForHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIdForHouse(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isUniqueName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isUniqueName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lock()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockupAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockupAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    managers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    "policy()"(overrides?: CallOverrides): Promise<[string]>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        name: string;
        house: string;
        classId: BigNumber;
        gons: BigNumber;
      }
    >;

    "profiles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        name: string;
        house: string;
        classId: BigNumber;
        gons: BigNumber;
      }
    >;

    pullPolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pullPolicy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushPolicy(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pushPolicy(address)"(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renouncePolicy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokens(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rescueTokens(address,address,uint256)"(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sROME(overrides?: CallOverrides): Promise<[string]>;

    "sROME()"(overrides?: CallOverrides): Promise<[string]>;

    totalHouses(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalHouses()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlock()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activateProfile(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "activateProfile()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addClass(
    newClass_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addClass(bytes32)"(
    newClass_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeHouse(
    newHouse_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeHouse(bytes32)"(
    newHouse_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeLockupAmount(
    newLockupAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeLockupAmount(uint256)"(
    newLockupAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeManaging(
    who: string,
    isManaging: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeManaging(address,bool)"(
    who: string,
    isManaging: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeName(
    newName_: BytesLike,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeName(bytes32,address)"(
    newName_: BytesLike,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSROME(
    sROME_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeSROME(address)"(
    sROME_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  classes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "classes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createHouse(
    newHouse_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createHouse(bytes32)"(
    newHouse_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProfile(
    name_: BytesLike,
    house_: BytesLike,
    classId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createProfile(bytes32,bytes32,uint256)"(
    name_: BytesLike,
    house_: BytesLike,
    classId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateProfile(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deactivateProfile()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClassLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getClassLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getClasses(overrides?: CallOverrides): Promise<string[]>;

  "getClasses()"(overrides?: CallOverrides): Promise<string[]>;

  getIdForHouse(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "getIdForHouse(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isUniqueName(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isUniqueName(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lock()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockupAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "lockupAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  managers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "managers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  policy(overrides?: CallOverrides): Promise<string>;

  "policy()"(overrides?: CallOverrides): Promise<string>;

  profiles(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      name: string;
      house: string;
      classId: BigNumber;
      gons: BigNumber;
    }
  >;

  "profiles(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      name: string;
      house: string;
      classId: BigNumber;
      gons: BigNumber;
    }
  >;

  pullPolicy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pullPolicy()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushPolicy(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pushPolicy(address)"(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePolicy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renouncePolicy()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokens(
    token_: string,
    recipient_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rescueTokens(address,address,uint256)"(
    token_: string,
    recipient_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sROME(overrides?: CallOverrides): Promise<string>;

  "sROME()"(overrides?: CallOverrides): Promise<string>;

  totalHouses(overrides?: CallOverrides): Promise<BigNumber>;

  "totalHouses()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlock()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateProfile(overrides?: CallOverrides): Promise<void>;

    "activateProfile()"(overrides?: CallOverrides): Promise<void>;

    addClass(newClass_: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addClass(bytes32)"(
      newClass_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeHouse(newHouse_: BytesLike, overrides?: CallOverrides): Promise<void>;

    "changeHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLockupAmount(
      newLockupAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeLockupAmount(uint256)"(
      newLockupAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeManaging(
      who: string,
      isManaging: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeManaging(address,bool)"(
      who: string,
      isManaging: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeName(
      newName_: BytesLike,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeName(bytes32,address)"(
      newName_: BytesLike,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSROME(sROME_: string, overrides?: CallOverrides): Promise<void>;

    "changeSROME(address)"(
      sROME_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    classes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "classes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createHouse(newHouse_: BytesLike, overrides?: CallOverrides): Promise<void>;

    "createHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createProfile(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, string, BigNumber]>;

    "createProfile(bytes32,bytes32,uint256)"(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, string, BigNumber]>;

    deactivateProfile(overrides?: CallOverrides): Promise<void>;

    "deactivateProfile()"(overrides?: CallOverrides): Promise<void>;

    getClassLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getClassLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getClasses(overrides?: CallOverrides): Promise<string[]>;

    "getClasses()"(overrides?: CallOverrides): Promise<string[]>;

    getIdForHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIdForHouse(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUniqueName(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isUniqueName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(overrides?: CallOverrides): Promise<boolean>;

    "lock()"(overrides?: CallOverrides): Promise<boolean>;

    lockupAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockupAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    managers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    policy(overrides?: CallOverrides): Promise<string>;

    "policy()"(overrides?: CallOverrides): Promise<string>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        name: string;
        house: string;
        classId: BigNumber;
        gons: BigNumber;
      }
    >;

    "profiles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        name: string;
        house: string;
        classId: BigNumber;
        gons: BigNumber;
      }
    >;

    pullPolicy(overrides?: CallOverrides): Promise<void>;

    "pullPolicy()"(overrides?: CallOverrides): Promise<void>;

    pushPolicy(newOwner_: string, overrides?: CallOverrides): Promise<void>;

    "pushPolicy(address)"(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renouncePolicy(overrides?: CallOverrides): Promise<void>;

    "renouncePolicy()"(overrides?: CallOverrides): Promise<void>;

    rescueTokens(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rescueTokens(address,address,uint256)"(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sROME(overrides?: CallOverrides): Promise<string>;

    "sROME()"(overrides?: CallOverrides): Promise<string>;

    totalHouses(overrides?: CallOverrides): Promise<BigNumber>;

    "totalHouses()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(overrides?: CallOverrides): Promise<boolean>;

    "unlock()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ClassCreated(bytes32,uint256)"(
      className?: null,
      classId?: BigNumberish | null
    ): ClassCreatedEventFilter;
    ClassCreated(
      className?: null,
      classId?: BigNumberish | null
    ): ClassCreatedEventFilter;

    "HouseChanged(bytes32,bytes32,address)"(
      oldHouse?: null,
      newHouse?: null,
      userAddress?: string | null
    ): HouseChangedEventFilter;
    HouseChanged(
      oldHouse?: null,
      newHouse?: null,
      userAddress?: string | null
    ): HouseChangedEventFilter;

    "HouseCreated(bytes32,address,uint256,uint256)"(
      house?: null,
      creatorAddress?: null,
      houseId?: BigNumberish | null,
      timestampCreated?: null
    ): HouseCreatedEventFilter;
    HouseCreated(
      house?: null,
      creatorAddress?: null,
      houseId?: BigNumberish | null,
      timestampCreated?: null
    ): HouseCreatedEventFilter;

    "LockupAmountUpdated(uint256)"(
      newLockupAmount?: null
    ): LockupAmountUpdatedEventFilter;
    LockupAmountUpdated(newLockupAmount?: null): LockupAmountUpdatedEventFilter;

    "ManagementChanged(address,bool)"(
      managerAddress?: null,
      isManager?: boolean | null
    ): ManagementChangedEventFilter;
    ManagementChanged(
      managerAddress?: null,
      isManager?: boolean | null
    ): ManagementChangedEventFilter;

    "NameChanged(bytes32,bytes32,address)"(
      oldName?: null,
      newName?: null,
      userAddress?: string | null
    ): NameChangedEventFilter;
    NameChanged(
      oldName?: null,
      newName?: null,
      userAddress?: string | null
    ): NameChangedEventFilter;

    "OwnershipPulled(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPulledEventFilter;
    OwnershipPulled(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPulledEventFilter;

    "OwnershipPushed(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPushedEventFilter;
    OwnershipPushed(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipPushedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProfileActivated(address,uint256)"(
      userAddress?: string | null,
      timestampActivated?: null
    ): ProfileActivatedEventFilter;
    ProfileActivated(
      userAddress?: string | null,
      timestampActivated?: null
    ): ProfileActivatedEventFilter;

    "ProfileCreated(bytes32,bytes32,uint256,address,uint256)"(
      characterName?: null,
      house?: BytesLike | null,
      classId?: BigNumberish | null,
      userAddress?: string | null,
      timestampCreated?: null
    ): ProfileCreatedEventFilter;
    ProfileCreated(
      characterName?: null,
      house?: BytesLike | null,
      classId?: BigNumberish | null,
      userAddress?: string | null,
      timestampCreated?: null
    ): ProfileCreatedEventFilter;

    "ProfileDeactivated(address,uint256)"(
      userAddress?: string | null,
      timestampDeactivated?: null
    ): ProfileDeactivatedEventFilter;
    ProfileDeactivated(
      userAddress?: string | null,
      timestampDeactivated?: null
    ): ProfileDeactivatedEventFilter;

    "TokensRescued(address,address,uint256)"(
      token?: string | null,
      recipient?: null,
      amount?: null
    ): TokensRescuedEventFilter;
    TokensRescued(
      token?: string | null,
      recipient?: null,
      amount?: null
    ): TokensRescuedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "sRomeUpdated(address)"(newSRomeContract?: null): sRomeUpdatedEventFilter;
    sRomeUpdated(newSRomeContract?: null): sRomeUpdatedEventFilter;
  };

  estimateGas: {
    activateProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "activateProfile()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addClass(
      newClass_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addClass(bytes32)"(
      newClass_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeHouse(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeLockupAmount(
      newLockupAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeLockupAmount(uint256)"(
      newLockupAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeManaging(
      who: string,
      isManaging: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeManaging(address,bool)"(
      who: string,
      isManaging: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeName(
      newName_: BytesLike,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeName(bytes32,address)"(
      newName_: BytesLike,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSROME(
      sROME_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeSROME(address)"(
      sROME_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    classes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "classes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createHouse(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProfile(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createProfile(bytes32,bytes32,uint256)"(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deactivateProfile()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClassLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getClassLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getClasses(overrides?: CallOverrides): Promise<BigNumber>;

    "getClasses()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIdForHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIdForHouse(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUniqueName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isUniqueName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lock()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockupAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "lockupAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    managers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    "policy()"(overrides?: CallOverrides): Promise<BigNumber>;

    profiles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "profiles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pullPolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pullPolicy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushPolicy(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pushPolicy(address)"(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renouncePolicy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokens(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rescueTokens(address,address,uint256)"(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sROME(overrides?: CallOverrides): Promise<BigNumber>;

    "sROME()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalHouses(overrides?: CallOverrides): Promise<BigNumber>;

    "totalHouses()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlock()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "activateProfile()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addClass(
      newClass_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addClass(bytes32)"(
      newClass_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeHouse(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeLockupAmount(
      newLockupAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeLockupAmount(uint256)"(
      newLockupAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeManaging(
      who: string,
      isManaging: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeManaging(address,bool)"(
      who: string,
      isManaging: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeName(
      newName_: BytesLike,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeName(bytes32,address)"(
      newName_: BytesLike,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSROME(
      sROME_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeSROME(address)"(
      sROME_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    classes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "classes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createHouse(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createHouse(bytes32)"(
      newHouse_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProfile(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createProfile(bytes32,bytes32,uint256)"(
      name_: BytesLike,
      house_: BytesLike,
      classId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deactivateProfile()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClassLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getClassLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClasses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getClasses()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIdForHouse(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIdForHouse(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUniqueName(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUniqueName(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lock()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockupAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockupAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "managers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "policy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "profiles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pullPolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pullPolicy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushPolicy(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pushPolicy(address)"(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renouncePolicy()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokens(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rescueTokens(address,address,uint256)"(
      token_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sROME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sROME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHouses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalHouses()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlock()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
