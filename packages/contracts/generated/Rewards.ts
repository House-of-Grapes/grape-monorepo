/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RewardsInterface extends utils.Interface {
  functions: {
    "DENOMINATOR()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimAmount()": FunctionFragment;
    "claimBonusCeiling()": FunctionFragment;
    "claimBonusNumerator()": FunctionFragment;
    "claimInterval()": FunctionFragment;
    "getAmount(address)": FunctionFragment;
    "hasInitialClaimed(address)": FunctionFragment;
    "initialClaim(address,uint256,bytes32[])": FunctionFragment;
    "isEligble(address)": FunctionFragment;
    "lastClaimed(address)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "setClaimAmount(uint256)": FunctionFragment;
    "setClaimBonusCeiling(uint256)": FunctionFragment;
    "setClaimBonusNumerator(uint256)": FunctionFragment;
    "setClaimInterval(uint256)": FunctionFragment;
    "setRewardsToken(address)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "setStakingTokenDecimals(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "stakingTokenDecimals()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBonusCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBonusNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAmount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasInitialClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialClaim",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "isEligble", values: [string]): string;
  encodeFunctionData(functionFragment: "lastClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimBonusCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimBonusNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingTokenDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBonusCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBonusNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEligble", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimBonusCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimBonusNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Harvest(address,uint256,uint256)": EventFragment;
    "InitialClaim(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type HarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; ammount: BigNumber; timestamp: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type InitialClaimEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type InitialClaimEventFilter = TypedEventFilter<InitialClaimEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Rewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimBonusCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimBonusCeiling()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimBonusNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimBonusNumerator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimInterval()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmount(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasInitialClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasInitialClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialClaim(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialClaim(address,uint256,bytes32[])"(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEligble(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isEligble(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardsToken()"(overrides?: CallOverrides): Promise<[string]>;

    setClaimAmount(
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setClaimAmount(uint256)"(
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimBonusCeiling(
      _claimBonusCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setClaimBonusCeiling(uint256)"(
      _claimBonusCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimBonusNumerator(
      _claimBonusNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setClaimBonusNumerator(uint256)"(
      _claimBonusNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimInterval(
      _claimInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setClaimInterval(uint256)"(
      _claimInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsToken(
      _rewardsToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardsToken(address)"(
      _rewardsToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStakingToken(address)"(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingTokenDecimals(
      _stakingTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStakingTokenDecimals(uint256)"(
      _stakingTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    "stakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakingTokenDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimBonusCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  "claimBonusCeiling()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimBonusNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "claimBonusNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "claimInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getAmount(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasInitialClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "hasInitialClaimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialClaim(
    to: string,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialClaim(address,uint256,bytes32[])"(
    to: string,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEligble(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isEligble(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastClaimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  "rewardsToken()"(overrides?: CallOverrides): Promise<string>;

  setClaimAmount(
    _claimAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setClaimAmount(uint256)"(
    _claimAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimBonusCeiling(
    _claimBonusCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setClaimBonusCeiling(uint256)"(
    _claimBonusCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimBonusNumerator(
    _claimBonusNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setClaimBonusNumerator(uint256)"(
    _claimBonusNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimInterval(
    _claimInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setClaimInterval(uint256)"(
    _claimInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsToken(
    _rewardsToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardsToken(address)"(
    _rewardsToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingToken(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStakingToken(address)"(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingTokenDecimals(
    _stakingTokenDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStakingTokenDecimals(uint256)"(
    _stakingTokenDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  stakingTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingTokenDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimBonusCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    "claimBonusCeiling()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimBonusNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "claimBonusNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "claimInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasInitialClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasInitialClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialClaim(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialClaim(address,uint256,bytes32[])"(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    isEligble(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isEligble(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    "rewardsToken()"(overrides?: CallOverrides): Promise<string>;

    setClaimAmount(
      _claimAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimAmount(uint256)"(
      _claimAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimBonusCeiling(
      _claimBonusCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimBonusCeiling(uint256)"(
      _claimBonusCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimBonusNumerator(
      _claimBonusNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimBonusNumerator(uint256)"(
      _claimBonusNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimInterval(
      _claimInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimInterval(uint256)"(
      _claimInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsToken(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardsToken(address)"(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStakingToken(address)"(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingTokenDecimals(
      _stakingTokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStakingTokenDecimals(uint256)"(
      _stakingTokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingTokenDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Harvest(address,uint256,uint256)"(
      account?: string | null,
      ammount?: BigNumberish | null,
      timestamp?: BigNumberish | null
    ): HarvestEventFilter;
    Harvest(
      account?: string | null,
      ammount?: BigNumberish | null,
      timestamp?: BigNumberish | null
    ): HarvestEventFilter;

    "InitialClaim(address,uint256)"(
      to?: string | null,
      amount?: null
    ): InitialClaimEventFilter;
    InitialClaim(to?: string | null, amount?: null): InitialClaimEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimBonusCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    "claimBonusCeiling()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimBonusNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "claimBonusNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "claimInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAmount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasInitialClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasInitialClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialClaim(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialClaim(address,uint256,bytes32[])"(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEligble(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isEligble(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimAmount(
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setClaimAmount(uint256)"(
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimBonusCeiling(
      _claimBonusCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setClaimBonusCeiling(uint256)"(
      _claimBonusCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimBonusNumerator(
      _claimBonusNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setClaimBonusNumerator(uint256)"(
      _claimBonusNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimInterval(
      _claimInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setClaimInterval(uint256)"(
      _claimInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsToken(
      _rewardsToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardsToken(address)"(
      _rewardsToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStakingToken(address)"(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingTokenDecimals(
      _stakingTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStakingTokenDecimals(uint256)"(
      _stakingTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingTokenDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DENOMINATOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimBonusCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimBonusCeiling()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBonusNumerator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimBonusNumerator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimInterval()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasInitialClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasInitialClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialClaim(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialClaim(address,uint256,bytes32[])"(
      to: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEligble(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEligble(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimAmount(
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setClaimAmount(uint256)"(
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimBonusCeiling(
      _claimBonusCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setClaimBonusCeiling(uint256)"(
      _claimBonusCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimBonusNumerator(
      _claimBonusNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setClaimBonusNumerator(uint256)"(
      _claimBonusNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimInterval(
      _claimInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setClaimInterval(uint256)"(
      _claimInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsToken(
      _rewardsToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardsToken(address)"(
      _rewardsToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStakingToken(address)"(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingTokenDecimals(
      _stakingTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStakingTokenDecimals(uint256)"(
      _stakingTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingTokenDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
